model User {
  id                 String         @id @default(uuid())
  firstName          String?
  lastName           String?
  email              String         @unique
  password           String
  role               Role           @default(USER)
  isEmailVerified    Boolean        @default(false)
  isVerified         Boolean        @default(false)
  isDeleted          Boolean        @default(false)
  hashedRefreshToken String?
  activationLink     String?
  Profile            UserProfile[]
  Booking            Booking[]
  Review             Review[]
  notifications      Notification[]
}

model UserProfile {
  id          String  @id @default(uuid())
  phoneNumber String
  gender      Gender
  country     String
  language    String
  uiTheme     UiTheme @default(LIGHT)
  description String?
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  accommodationId String
  paymentId       String
  startDate       DateTime
  endDate         DateTime
  status          Status        @default(PENDING)
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  payment         Payment       @relation(fields: [paymentId], references: [id])
}

model Accommodation {
  id           String    @id @default(uuid())
  addressId    String
  thumbnailUrl String
  ownerId      String
  description  String
  price        Float
  availability Boolean
  address      Address   @relation(fields: [addressId], references: [id])
  amenities    Amenity[]
  media        Media[]
  reviews      Review[]
  Booking      Booking[]
}

model Amenity {
  id               String  @id @default(uuid())
  wifi             Boolean @default(false)
  parking          Boolean @default(false)
  swimmingPool     Boolean @default(false)
  petAllowance     Boolean @default(false)
  quiteArea        Boolean @default(false)
  backyard         Boolean @default(false)
  smokingAllowance Boolean @default(false)
  childFriendly    Boolean @default(false)
  hospitalNearby   Boolean @default(false)
  closeToCenter    Boolean @default(false)
  laundryService   Boolean @default(false)
  kitchen          Boolean @default(false)
  airConditioning  Boolean @default(false)
  tv               Boolean @default(false)
  airportTransfer  Boolean @default(false)
  otherAmenities   String?

  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId String        @unique
}

model Media {
  id              String        @id @default(uuid())
  imageUrl        String
  thumbnailUrl    String
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId String
}

model Notification {
  id      String @id @default(uuid())
  type    String
  title   String
  message String
  users   User[]
}

model Payment {
  id            String    @id @default(uuid())
  type          String
  transactionId String
  totalAmount   Float
  status        Status
  Booking       Booking[]
}

model Address {
  id            String          @id @default(uuid())
  street        String
  city          String
  country       String
  zipCode       String
  latitude      Float
  longitude     Float
  Accommodation Accommodation[]
}

model Review {
  id              String        @id @default(uuid())
  userId          String
  accommodationId String
  title           String
  feedback        String
  rating          Int
  user            User          @relation(fields: [userId], references: [id])
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum UiTheme {
  LIGHT
  DARK
  SYSTEM
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
